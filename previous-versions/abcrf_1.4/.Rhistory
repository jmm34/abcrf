model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000, paral = TRUE)
data(snp.obs)
test <- predict(model.rf.r, snp.obs$sumsta, dataTrain, paral=TRUE)
test$time.Marin
test$time.C
test
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000, paral = TRUE)
data(snp.obs)
test <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE); test; test$time.C; test$time.Marin
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000, paral = TRUE)
data(snp.obs)
test <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE); test; test$time.C; test$time.Marin
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100, paral = TRUE)
data(snp.obs)
test <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE); test; test$time.C; test$time.Marin
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100, paral = TRUE)
data(snp.obs)
test <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE); test; test$time.C; test$time.Marin
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
pred.all
dim(pred.all)
dim(pred.all)  time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
#  time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.ID - time1.ID
time2.all - time1.all
time2.ID - time1.ID
time2.all - time1.all
time2.ID - time1.ID
time2.all - time1.all
predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
time1.ID <- Sys.time()
pred.ID <- predict(object$model.rf, temp.data, type="terminalNodes", num.threads=ncores)$predictions
time2.ID <- Sys.time()
time2.ID - time1.ID
time1.all <- Sys.time()
pred.all <- predict(object$model.rf, temp.data, predict.all=TRUE, num.threads=ncores)$predictions
time2.all <- Sys.time()
time2.all - time1.all
library(abcrf)
help("predict.regAbcrf")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000, paral=TRUE)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE)
time1 <- Sys.time()
esper <- sapply(1:nrow(x), function(x) weights.std[,x]%*%origObs)
time2 <- Sys.time()
time1.c <- Sys.time()
esperRf <- predict(object$model.rf, data=x, num.threads=ncores, ...)$predictions
time2.c <- Sys.time()
time2-time1
time2.c-time1.c
time1 <- Sys.time()
esper <- sapply(1:nrow(x), function(x) weights.std[,x]%*%origObs)
time2 <- Sys.time()
time1.c <- Sys.time()
esperRf <- predict(object$model.rf, data=x, num.threads=ncores, ...)$predictions
time2.c <- Sys.time()
time2-time1
time2.c-time1.c
time1 <- Sys.time()
esper <- sapply(1:nrow(x), function(x) weights.std[,x]%*%origObs)
time2 <- Sys.time()
time1.c <- Sys.time()
esperRf <- predict(object$model.rf, data=x, num.threads=ncores, ...)$predictions
time2.c <- Sys.time()
time2-time1
time2.c-time1.c
time1 <- Sys.time()
esper <- sapply(1:nrow(x), function(x) weights.std[,x]%*%origObs)
time2 <- Sys.time()
time1.c <- Sys.time()
esperRf <- predict(object$model.rf, data=x, num.threads=ncores, ...)$predictions
time2.c <- Sys.time()
time2-time1
time2.c-time1.c
plot(esper, esperRf)
setwd("C:/Users/Louis Raynal/OneDrive/These/Recherche/Fonction lecture donnÃ©es DIYABC dans R/HUMAN")
library(abcrf)
library(abcrf)
help("readRefTable")
setwd("E:/These/Fonction lecture donn?es DIYABC dans R/human avec rf.bin")
source("E:/These/Fonction lecture donn?es DIYABC dans R/readRefTable.R")
library(abcrf)
help(readRefTable)
help(regAbcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
model.rf.r
names(dataTrain)
names(dataTrain) <- NULL
head(dataTrain)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
model.rf.r
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain[1,], ntree=100)
model.rf.r
library(abcrf)
help(predict.regAbcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs$sumsta, dataTrain)
sqrt(0.006)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta, dataTrain, main = "Posterior density of r")
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta, dataTrain, main = "Posterior density of r")
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta, dataTrain, main = "Posterior density of r")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta, dataTrain, main = "Posterior density of r")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta, dataTrain, main = "Posterior density of r")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta[1,], dataTrain, main = "Posterior density of r")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta[1,], dataTrain, main = "Posterior density of r")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
densityPlot(model.rf.r, snp.obs$sumsta[,2], dataTrain, main = "Posterior density of r")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
N1 <- snp$param$N1[modindex == "3"]
N1 <- N1[1:500]
dataTrain2 <- data.frame(N1, sumsta)
model.rf.N1 <- regAbcrf(N1~., dataTrain2, ntree=100)
data(snp.obs)
covRegAbcrf(model.rf.r, model.rf.N1, snp.obs$sumsta,
dataTrain, dataTrain2 , ntree=100)
lbirary(abcrf)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
N1 <- snp$param$N1[modindex == "3"]
N1 <- N1[1:500]
dataTrain2 <- data.frame(N1, sumsta)
model.rf.N1 <- regAbcrf(N1~., dataTrain2, ntree=100)
data(snp.obs)
covRegAbcrf(model.rf.r, model.rf.N1, snp.obs$sumsta,
dataTrain, dataTrain2 , ntree=100)
library(abcrf)
help(abcrf)
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
model.rf
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100, verbose=FALSE)
model.rf
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100, verbose=FALSE)
model.rf
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100, verbose=FALSE)
library(abcrf)
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100, verbose=FALSE)
model.rf
help(anger)
help(ranger)
help(predict.regAbcrf)
help(predict.regAbc)
library(abcrf)
help(predict.regAbcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs$sumsta, dataTrain)
help(predict.abcrf)
help(plot.abcrf)
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
plot(model.rf, training=dataTrain)
plot(model.rf, snp.obs$sumsta[1,], training=dataTrain)
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
plot(model.rf, training=dataTrain)
plot(model.rf, snp.obs$sumsta, training=dataTrain)
help("regAbcrf")
help("predict.rbcrf")
help("predict.abcrf")
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
data(snp.obs)
predict(model.rf, snp.obs$sumsta, dataTrain, ntree=100)help("predict.abcrf")
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
data(snp.obs)
predict(model.rf, snp.obs$sumsta, dataTrain, ntree=100)help("predict.abcrf")
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
data(snp.obs)
predict(model.rf, snp.obs$sumsta, dataTrain, ntree=100)
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
snp.obs
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
colnames(snp.obs) <- NULL
snp.obs
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
colnames(snp.obs$sumsta) <- NULL
data(snp)
modindex <- snp$modindex[1:500]
sumsta <- snp$sumsta[1:500,]
dataTrain <- data.frame(modindex, sumsta)
model.rf <- abcrf(modindex~., dataTrain, ntree=100)
snp.obs$sumsta
predict(model.rf, snp.obs$sumsta, dataTrain, ntree=100)
help(head)
library(abcrf)
library(abcrf)
help("readBin")
help(strsplit)
help(str_extract)
getAnywhere(str_extract)
help(str_match_all)
help(read_file)
options()
