{
    "collab_server" : "",
    "contents" : "\\name{covRegAbcrf}\n\\alias{covRegAbcrf}\n\\alias{covRegAbcrf.regAbcrf}\n\\title{\nPredict posterior covariance between two parameters for new data using two reg-ABC-RF objects\n}\n\\description{\nUsing two reg-ABC-RF objects constructed on the same reference table for two different response variables, this function predicts the posterior covariance between those two response variables, given a new dataset of summaries.\n}\n\\usage{\n\\method{covRegAbcrf}{regAbcrf}(regForest1, regForest2, obs, training1, training2,\nntree=500, mtry=max(floor((dim(training1)[2]-1)/3), 1), sampsize=min(1e5, dim(training1)[1]), \nparal = FALSE, ncores = if(paral) max(detectCores()-1,1) else 1,\nparal.predict = FALSE, ncores.predict = if(paral.predict) max(detectCores()-1,1) else 1, ... )\n}\n\\arguments{\n  \\item{regForest1, regForest2}{\\code{\\link{regAbcrf}} objects.}\n  \\item{obs}{a data frame containing the summary statistics of the observed data sets.}\n  \\item{training1, training2}{data frames containing the reference table respectively used to train the \\code{\\link{regAbcrf}} objects regForest1 and regForest2.}\n  \\item{ntree}{number of trees to grow in the forest, by default equal to 500 trees.}\n  \\item{mtry}{Number of variables to possibly split at in each node for the regression random forest. Default is the minimum between 1 and the number of variables divided by 3.}\n  \\item{sampsize}{size of the sample from the reference table used to grow a tree of the regression forest, by default the minimum between the number of elements of the reference table and 100,000.}\n  \\item{paral}{a boolean that indicates whether or not the calculations of the regression random forest (forest used to predict a response from the observed dataset) should be parallelized.}\n  \\item{ncores}{the number of CPU cores to use. If paral=TRUE, it is used the number of CPU cores minus 1.}\n  \\item{paral.predict}{a boolean that indicates if random forests predictions should be parallelized.}\n  \\item{ncores.predict}{the number of CPU cores to use for the regression random forest predictions. If paral.predict=TRUE, it is used the number of CPU cores minus 1.}\n  \\item{\\dots}{additional arguments to be passed on to \\code{\\link{ranger}} used to construct the regression random forest that predicts posterior covariance.}\n}\n\\value{\n\\code{covRegAbcrf} returns predicted posterior covariances between response variables of two reg-ABC-RF objects, for a new data set.\n}\n\\references{\nMarin, J.-M., Raynal, L., Pudlo, P., Ribatet, M. and Robert, C.P. (2016)\n\\emph{ABC random forests for Bayesian parameter inference}\n\\url{http://arxiv.org/pdf/1605.05537v2.pdf}\n}\n\\seealso{\n\\code{\\link{regAbcrf}},\n\\code{\\link{predict.regAbcrf}},\n\\code{\\link{err.regAbcrf}},\n\\code{\\link{plot.regAbcrf}},\n\\code{\\link{ranger}},\n\\code{\\link{densityPlot}}\n}\n\\examples{\ndata(snp)\nmodindex <- snp$modindex\nsumsta <- snp$sumsta[modindex == \"3\",]\nr <- snp$param$r[modindex == \"3\"]\nr <- r[1:500]\nsumsta <- sumsta[1:500,]\ndataTrain <- data.frame(r, sumsta)\nmodel.rf.r <- regAbcrf(r~., dataTrain, ntree=100)\nN1 <- snp$param$N1[modindex == \"3\"]\nN1 <- N1[1:500]\ndataTrain2 <- data.frame(N1, sumsta) \nmodel.rf.N1 <- regAbcrf(N1~., dataTrain2, ntree=100)\ndata(snp.obs)\ncovRegAbcrf(model.rf.r, model.rf.N1, snp.obs$sumsta, \n            dataTrain, dataTrain2 , ntree=100)\n}\n",
    "created" : 1480358675919.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "563430247",
    "id" : "4C14D078",
    "lastKnownWriteTime" : 1480358682,
    "last_content_update" : 1480358680126,
    "path" : "E:/These/abcrf 1.4 avec ranger/abcrf_1.4/man/covRegAbcrf.Rd",
    "project_path" : "man/covRegAbcrf.Rd",
    "properties" : {
    },
    "relative_order" : 22,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_doc"
}