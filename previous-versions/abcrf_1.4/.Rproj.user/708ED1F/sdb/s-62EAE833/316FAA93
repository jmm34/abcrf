{
    "collab_server" : "",
    "contents" : "readRefTable=function(filename = \"reftable.bin\", header = \"header.txt\")\n{\n##################################################################\n    ## Headers parsing\n    header = read_file(header)          # whole file in one string\n    \n### First part, scenarios\n    ##  extraction of scenarios descriptions\n    rescen = \"\\\\bscenario\\\\s+(\\\\d+)\\\\s+.*\\\\n((?:(?!(?:scenario|\\\\n)).*\\\\n)+)\"\n    scenprematch = str_extract_all(header,rescen)[[1]]\n    nscenh = length(scenprematch)       # Number of scenarios\n    scenmatch = str_match_all(scenprematch,rescen)\n    ## scendesc is the vector of scenarios descriptions\n    scendesc <- vector(mode=\"character\", length=nscenh)\n    # loop on each scenario to store their descriptions\n    for(i in 1:nscenh)\n    {\n        scendesc[as.integer(scenmatch[[i]][2])] = scenmatch[[i]][3]\n    }\n\n### Second part, hist params\n    ## extraction of parameters names (and the corresponding law too,\n    ## in order to check if it is a dirac base, aka constant, as we\n    ## ignore it in the reftable)\n    reparamtot = \"historical parameters priors \\\\((\\\\d+)\\\\D\"\n    ## nparamtoth is the total number of hist params in header\n    nparamtoth = as.integer(str_match(str_extract(header,reparamtot)[[1]],reparamtot)[2])\n    reparamlist = paste0(\"\\\\bhistorical parameters priors.*\\\\n((?:\\\\w+\\\\W[^\\\\n]*\\\\n){\",nparamtoth,\"})\")\n    paramlistmatch = str_match(str_extract_all(header,reparamlist),reparamlist)[2]\n    ## regexp to extract : param name, mini and maximum of the law\n    reparam = \"(\\\\w+)\\\\W+\\\\w\\\\W+\\\\w\\\\w\\\\[([^,\\\\]]+),([^,\\\\]]+)[,\\\\]][^\\\\n]*\\\\n\"\n    paramsh = str_match_all(str_extract_all(paramlistmatch,reparam)[[1]],reparam)\n    paramsdesc = list()\n    reali = 1;\n    ## loop on all hist parameters to \"filter\" all constants\n    ## parameters\n    for(i in 1:nparamtoth)\n    {\n        mini = as.numeric(paramsh[[i]][3])\n        maxi = as.numeric(paramsh[[i]][4])\n        if(maxi != 0.0)\n            if ((maxi-mini)/maxi > 0.000001)\n                {\n                    paramsdesc[paramsh[[i]][2]] = reali\n                    reali = reali + 1\n                }\n    }\n    realparamtot = reali - 1 # this is the real number of non constant\n                                        # historical parameters\n\n### Third part, extract parameters for each scenario\n    # parambyscenh stores the indices of used parameters for each\n    # scenario\n    parambyscenh <- vector(mode=\"numeric\",length=nscenh)\n    # Loop for all scenarios\n    for(i in 1:nscenh)\n    {\n        templist = list()\n        # list of terms used in scenario descriptions\n        listterms = strsplit(scendesc[i],\"\\\\W\")[[1]]\n        m = 1\n        for(j in 1:length(listterms)) \n        {\n            if (!is.null(paramsdesc[listterms[j]][[1]]))\n            {\n                templist[m] = paramsdesc[listterms[j]][[1]]\n                m = m + 1\n            }\n        }\n        parambyscenh[i] = list((unique(unlist(templist))))\n    }\n\n    # Get all names\n    restatsname = \"\\\\n\\\\nscenario\\\\s+.*\"\n    allcolspre = tail(strsplit(str_extract(header,restatsname),\"\\\\s+\")[[1]],-2)\n\n##################################################################\n    ## Reftable feed\n    # Stream from reftable file\n    to.read = file(filename,\"rb\")\n    # number of records\n    nrec = readBin(to.read, integer(), endian = \"little\")\n    # number of scenarios\n    nscen = readBin(to.read, integer(), endian = \"little\")\n    # number of records for each scenario\n    nrecscen = readBin(to.read, integer(), n = nscen, endian = \"little\")\n    # number of used parameters (non constant)\n    nparam = readBin(to.read, integer(), n = nscen, endian = \"little\")\n    # number of stats\n    nstat = readBin(to.read, integer(), endian = \"little\")\n    # Get all params\n    paramsname = head(allcolspre,-nstat)\n    # Number of mutation parameters\n    nmutparams = length(paramsname) - realparamtot\n    # Stats matrix\n    stats = matrix(nrow = nrec, ncol = nstat)\n    colnames(stats) <- tail(allcolspre,nstat)\n    # Param matrix\n    params = matrix(nrow = nrec, ncol = realparamtot + nmutparams)\n    colnames(params) <- paramsname\n    # Scenarios vector\n    scenarios = vector(mode=\"numeric\", length = nrec)\n    # Parsing of records\n    for(i in 1:nrec)\n    {\n        scen = readBin(to.read, integer(), endian = \"little\")\n        scenarios[i] = scen\n        lparams = readBin(to.read, numeric(), n = nparam[scen], size = 4, endian = \"little\")\n        for(j in 1:length(parambyscenh[[scen]]))\n        {\n            params[i,parambyscenh[[scen]][j]] = lparams[j]\n        }\n        # Accounting for mutational parameters\n        if (nmutparams > 0)\n        {\n            for (jm in 1:nmutparams)\n            {\n                params[i,realparamtot+jm] = lparams[nparam[scen]-nmutparams+jm]\n            }\n        }\n        lstats = readBin(to.read, numeric(), n = nstat, size = 4, endian = \"little\")\n        for(j in 1:nstat)\n        {\n            stats[i,j] = lstats[j]\n        }\n    }\n    list(nrec = nrec, nscen = nscen, nrecscen = nrecscen, nparam = nparam, scenarios = scenarios, params = params, stats = stats)\n}\n",
    "created" : 1479995783764.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "510243992",
    "id" : "316FAA93",
    "lastKnownWriteTime" : 1479992096,
    "last_content_update" : 1479992096,
    "path" : "E:/These/abcrf 1.4 avec ranger/abcrf_1.4/R/readRefTable.R",
    "project_path" : "R/readRefTable.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}