{
    "collab_server" : "",
    "contents" : "regAbcrf.formula <- function(formula, data, ntree=500, mtry=max(floor((dim(data)[2]-1)/3), 1), sampsize=min(1e5, nrow(data)),\n                             paral=FALSE, ncores= if(paral) max(detectCores()-1,1) else 1, ...)\n{\n  \n  if (!inherits(formula, \"formula\"))\n    stop(\"regAbcrf.formula is only for formula objects\")\n  if (!inherits(data, \"data.frame\"))\n    stop(\"data needs to be a data.frame object\")\n  if (nrow(data) == 0L || is.null(nrow(data)) )\n    stop(\"no simulation in the reference table (resp, sumstat)\")\n  if(sampsize > nrow(data))\n    stop(\"sampsize too large\")\n  if ( (!is.logical(paral)) && (length(paral) != 1L) )\n    stop(\"paral should be TRUE or FALSE\")\n  if(ncores > detectCores() || ncores < 1)\n    stop(\"incorrect number of CPU cores\")\n  \n  mf <- match.call(expand.dots=FALSE)\n  m <- match(c(\"formula\", \"data\"), names(mf))\n  mf <- mf[c(1L,m)]\n  mf[[1L]] <- as.name(\"model.frame\")\n  mf <- eval(mf, parent.frame() )\n  mt <- attr(mf, \"terms\")\n  \n  if ( !is.numeric(model.response(mf)) ) \n     stop(\"response variable should be numeric\")\n    \n  model.rf <- ranger(formula, data=data, num.trees=ntree, mtry=mtry, sample.fraction=sampsize/nrow(data), \n                     num.threads = ncores, keep.inbag = TRUE, importance = 'impurity', ...)\n  \n  cl <- match.call()\n  cl[[1]] <- as.name(\"regAbcrf\")\n  x <- list(call=cl, formula=formula, model.rf = model.rf)\n  class(x) <- \"regAbcrf\"\n  x\n}\n\nregAbcrf.default <- \nfunction(...) {\n  cl <- match.call()\n  cl[[1]] <- as.name(\"regAbcrf\")\n  cat(\"call:\\n\")\n  print(cl)\n  stop(\"the first argument should be a formula or a factor\")\n}\n\nregAbcrf <-\nfunction(...) UseMethod(\"regAbcrf\")\n\nprint.regAbcrf <-\nfunction(x, ...){\n  \n  cat(\"\\nCall:\\n\", deparse(x$call), \"\\n\")\n  cat(\"Number of simulations: \", x$model.rf$num.samples, \"\\n\", sep=\"\")\n  cat(\"Number of trees: \", x$model.rf$num.trees, \"\\n\", sep=\"\")\n  cat(\"No. of variables tried at each split: \", x$model.rf$mtry, \"\\n\", sep=\"\")\n      \n}",
    "created" : 1479996732092.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2741352603",
    "id" : "B1A2C093",
    "lastKnownWriteTime" : 1479997040,
    "last_content_update" : 1479997039493,
    "path" : "C:/Users/Louis Raynal/Dropbox/ODOF/abcrf 1.4 avec ranger/abcrf_1.4/R/regAbcrf.R",
    "project_path" : "R/regAbcrf.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}