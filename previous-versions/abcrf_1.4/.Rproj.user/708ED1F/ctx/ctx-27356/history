data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:3], dataTrain)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:3,], dataTrain)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:3,], dataTrain)
saveee
saveee$expectation
summary(saveee$weights)
summary(saveee$weight)
plot(saveee$weight[,1], saveee$weights[,1])
plot(saveee$weight[,1], saveee$weights[,2])
plot(saveee$weight[,1], saveee$weights[,3])
plot(saveee$weight[,1], saveee$weights[,2])
plot(saveee$weight[,1], saveee$weights[,1])
plot(saveee$weights.std[,1], saveee$weight.std[,1])
plot(saveee$weights.std[,1], saveee$weight.std[,2])
plot(saveee$weights.std[,1], saveee$weight.std[,3])
plot(saveee$weights.std[,2], saveee$weight.std[,1])
plot(saveee$weights.std[,2], saveee$weight.std[,3])
plot(saveee$weights.std[,1], saveee$weight.std[,3])
plot(saveee$weights.std[,2], saveee$weight.std[,2])
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:4,], dataTrain)
plot(saveee$weights.std[,1], saveee$weight.std[,3])
plot(saveee$weights.std[,1], saveee$weight.std[,4])
plot(saveee$weights.std[,2], saveee$weight.std[,3])
help(predict.abcrf)
help(predict.ranger)
pred.ID
model.rf.r$model.rf$forest
model.rf.r$model.rf$forest$split.varIDs
model.rf.r$model.rf$forest$independent.variable.names
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:4,], dataTrain)
apply(weights,2,cumsum)
cumweights
apply(weights.std, 2, cumsum)
apply(weights.std, 2, cumsum)-cumweights
plot(apply(weights.std, 2, cumsum)[1,],cumweights[1,])
plot((apply(weights.std, 2, cumsum))[1,],cumweights[1,])
cumweights
cumweights[1,]
plot((apply(weights.std, 2, cumsum))[,1],cumweights[,1])
plot((apply(weights.std, 2, cumsum))[,2],cumweights[,2])
plot((apply(weights.std, 2, cumsum))[,3],cumweights[,3])
plot((apply(weights.std, 2, cumsum))[,4],cumweights[,4])
help(weep)
help(sweep)
weights()
weights
weights.std[ord,]
apply(weights.std[ord,], 2, cumsum)
apply(weights[ord,], 2, cumsum)
apply(weights.std[ord,], 2, cumsum)
test <- apply(weights.std[ord,], 2, cumsum)
plot(test[,1], cumweights[,1])
plot(test[,2], cumweights[,2])
plot(test[,3], cumweights[,3])
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:4,], dataTrain)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:4,], dataTrain)
saveee
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:4,], dataTrain)
larg
wc
ind1
indn1
quant
quantmax
quantmin
weightmax
weightmin
wc[indn1]
weight.std
weight.std[,1]
plot(weight.std[,1], weights.std[,1])
plot(weight.std[,1], weights.std[,2])
plot(weight.std[,1], weights.std[,3])
plot(weight.std[,1], weights.std[,4])
plot(weight.std[,2], weights.std[,3])
pred.ID
pred.ID[,1]
pred.ID
dim(inbag)
inbag[,1]
Lb
colrows(matYesNo2)
rowSums(matYesNo2)
Lb
help(matrix)
klm <- t(sapply(1:nobs, function(x) matYesNo2[x,]/Lb ))
af <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
af == klm
sum(af == klm)
which(af =! klm)
sum(af != klm)
which(af != klm)
nnew
matYesNo <- matrix(rep(pred.ID[nobs+i,], nobs), nobs, byrow=TRUE)==pred.ID[1:nobs,]
matYesNo2 <- matYesNo * inbag
Lb <- colSums(matYesNo2)
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtt <-  t(sapply(1:nobs, function(x) matYesNo2[x,]/Lb ))
rowSums(wt)
sum(rowSums(wt))
sum(rowSums(wtt))
sum(wt==wtt)
sum(wt[1,]==wtt[1,])
for (i in 1:500) sum(wt[i,]==wtt[i,])
for (i in 1:500) sum(wt[i,]==wtt[i,])
for (i in 1:500) print(sum(wt[i,]==wtt[i,]))
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta[1:4,], dataTrain)
library(abcrf)
help(predict.regAbcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
wt==wtt
which(wt==wtt)
which(wt!=wtt)
weight[,1]
cowSums(wt)
rowSums(wt)
rowSums(wtt)
rowSums(wtt==wt)
weight.1 <- rowSums(wtt)
plot(saveee$weights.std, saveee$weight.std)
plot(saveee$weights.std[,1], saveee$weight.std[,2])
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
wt <- matYesNo2*matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)
sums(wt=wtt)
sum(wt=wtt)
wttt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
sum(wttt=wtt)
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtt <-  t(sapply(1:nobs, function(x) matYesNo2[x,]/Lb ))
wttt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
sum(wttt==wtt)
sum(wt==wtt)
sum(wt==wttt)
wttt <- matYesNo2*matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)
sum(wttt==wtt)
sum(wttt==wt)
A <- matrix(1:10,2,5)
A
A/c(1:5)
A[1,]/c(1:5)
A[2,]/c(1:5)
A <- matrix(1:10,2,5, byrow = TRUE)
A
A[2,]/c(1:5)
A[1,]/c(1:5)
matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)
matYesNo2
dim(matYesNo2)
matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)
Lb
wtd <- matrix(rep(Lb, nobs), nobs, byrow=TRUE)/matYesNo2
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wt==wtd
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtd <- matYesNo2/ matrix(rep(Lb, nobs), nobs, byrow=TRUE)
sum(wt==wtd)
sum(wtt==wtd)
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtd <- matYesNo2 / matrix(rep(Lb, nobs), nobs, byrow=TRUE)
sum(wtd==wt)
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtd <- matYesNo2 / matrix(rep(Lb, nobs), nobs, byrow=TRUE); which(wt!=wtd)
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtd <- matYesNo2 / matrix(rep(Lb, nobs), nobs, byrow=TRUE); which(wt!=wtd)
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtd <- matYesNo2 / matrix(rep(Lb, nobs), nobs, byrow=TRUE); which(wt!=wtd)
wt <- matrix(rep(1/Lb, nobs), nobs, byrow=TRUE)*matYesNo2
wtd <- matYesNo2 / matrix(rep(Lb, nobs), nobs, byrow=TRUE); which(wt!=wtd)
wt <- matYesNo2 / matrix(rep(Lb, nobs), nobs, byrow=TRUE)
wtt <-  t(sapply(1:nobs, function(x) matYesNo2[x,]/Lb ))
sum(wt==wtt)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
saveee$weights
colSums(saveee$weights)
colSums(saveee$weight)
plot(saveee$weight[,1], saveee$weights[,1])
plot(saveee$weight[,1], saveee$weights[,2])
variance2 <-  sapply(1:nrow(x), function(x) weight.std[,x] %*% residus.oob.sq)
variance1
variance
variance2
A <- matrix(c(1:10), 2,5,byrow=TRUE)
A
1/c(1:5) * A
matrix(rep(1/c(1:5),2), byrow=TRUE) * A
matrix(rep(1/c(1:5),2), 2, byrow=TRUE) * A
A/matrix(rep(c(1:5),2), 2, byrow=TRUE)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
saveee$time.C
saveee$time.Marin
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, sumsta, dataTrain)
saveee$time.C
saveee$time.Marin
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs); sumsta <- snp$sumsta[modindex == "3",]
dim(sumsta)
saveee <- predict(model.rf.r, sumsta, dataTrain)
saveee$time.Marin
saveee$time.C
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs); sumsta <- snp$sumsta[modindex == "3",]
saveee <- predict(model.rf.r, sumsta, dataTrain)
saveee$time.Marin
saveee$time.C
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
saveee$time.Marin
saveee$time.C
saveee <- predict(model.rf.r, sumsta, dataTrain)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
saveee$time.C
saveee$time.Marin
plot(saveee$weights[,1], saveee$weight[,1])
plot(saveee$weights[,2], saveee$weight[,2])
plot(saveee$weights[,3], saveee$weight[,3])
saveee <- predict(model.rf.r, snp.obs$sumsta[1:30,], dataTrain)
saveee <- predict(model.rf.r, sumsta[1:30,], dataTrain)
saveee$time.Marin
saveee$time.C
is.null(0)
is.null(1)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain, paral=TRUE)
saveee$time.Marin
saveee$time.C
plot(saveee$weights[,1], saveee$weight[,1])
plot(saveee$weights[,2], saveee$weight[,2])
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain, paral=TRUE)
sapply(1:nrow(x), function(x) weight.std[,x]%*%origObs)
esper
esperRf
sapply(1:nrow(x), function(x) weight.std[,x] %*% residus.oob.sq)
variance
saveee$expectation
saveee$variance
saveee$med
saveee$weights.std
saveee$time.C
saveee$time.Marin
plot(saveee$weights[,1], saveee$weight[,1])
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain, paral=TRUE)
cumweights <- apply(weight.std[ord,], 2, cumsum)
saveee
0.5164445+1.96*0.004523
0.5164445-1.96*0.004523
0.5164445+1.96*sqrt(0.004523)
0.5164445-1.96*sqrt(0.004523)
0.1848122-1.96*sqrt(0.01338666)
0.1848122+1.96*sqrt(0.01338666)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000); saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain, paral=TRUE)
sapply(1:nrow(x), function(x) weights.std[,x]%*%origObs)
sapply(1:nrow(x), function(x) weight.std[,x]%*%origObs)
sapply(1:nrow(x), function(x) weights.std[,x] %*% residus.oob.sq)
sapply(1:nrow(x), function(x) weight.std[,x] %*% residus.oob.sq)
saveee$weights
saveee$weight
saveee$weights
identical(saveee$weights,saveee$weight)
(saveee$weights == saveee$weight)
plot(saveee$weights[,1], saveee$weight[,1])
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000); saveee <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE); saveee ; saveee$time.C; saveee$time.Marin
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=1000); saveee <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE); saveee ; saveee$time.C; saveee$time.Marin
library(abcrf)
help("predict.regAbcrf")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
data(snp.obs)
saveee <- predict(model.rf.r, snp.obs$sumsta, dataTrain)
saveee$time.Marin
saveee$time.C
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=100)
saveee <- predict(model.rf.r, sumsta, dataTrain)
saveee$time.C
saveee$time.Marin
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
dataTrain <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., dataTrain, ntree=10000, paral=TRUE)
saveee <- predict(model.rf.r, sumsta, dataTrain, paral=TRUE)
A <- matrix(c(1:10), 2,5)
A
c(1:5) == A
c(1:2) == A
c(1:5) == A
c(1:2) == A
c(1:5) == A
c(1:5) == A
A <- matrix(c(rep(0,5), rep(1,5)), 2,5)
A
A <- matrix(c(rep(0,5), rep(1,5)), 2,5, byrow=TRUE)
A
A==c(0,0,0,0,0)
c(0,0,0,0,0) == A
A==c(0,0,0,0,0)
A==c(0,0)
