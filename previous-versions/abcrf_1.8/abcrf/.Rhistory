??registerDoParallel
help(parallel)
??parallel
library(doParallel)
library(abcrf)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
res <- predictOOB(model.rf.r, data2)
res
model.rf.r
predictOOB(model.rf.r, data2, paral = TRUE)
res <- predictOOB(model.rf.r, data2, paral = TRUE, ncores=7)
res
setwd("E:/These 2016-2017/Articles/Article 4 - Desert Locust inference with ABC-RF/Code pour JdS/informed")
data.name<-"reftable1.bin"
data.root<-sub("\\..*$", "", data.name)
data <- readRefTable(filename = data.name, header="header.txt")
index1 <- data$scenarios == 1
poi1<-data$params[index1, "tca"]#to modify
poi2<-data$params[index1, "tdiv"]#to modify
poi<-poi1/poi2#to modify
data.poi <- data.frame(poi, data$stats[index1, ])
nref <- 10000
data.poi <- data.poi[1:nref,]
ntree<- 500
######### Forest construction and Prediction on a single statobs dataset
model.poi <- regAbcrf(formula = poi~., data = data.poi, ntree=ntree, paral = TRUE)
model.poi
set.seed(1)
######### Forest construction and Prediction on a single statobs dataset
model.poi <- regAbcrf(formula = poi~., data = data.poi, ntree=ntree, paral = TRUE)
start.predict<- Sys.time()
pred.obsPoi <- predict(object = model.poi, obs = obs.poi, training = data.poi,
quantiles = c(0.05,0.95), paral = TRUE, paral.predict=TRUE, post.err.med = TRUE)
stop.predict<-Sys.time()
stop.predict-start.predict
obs.poi <- read.table("statobs.txt", header=TRUE)
start.predict<- Sys.time()
pred.obsPoi <- predict(object = model.poi, obs = obs.poi, training = data.poi,
quantiles = c(0.05,0.95), paral = TRUE, paral.predict=TRUE, post.err.med = TRUE)
stop.predict<-Sys.time()
stop.predict-start.predict
start.predictOOB<- Sys.time()
predoob.Poi <- predictOOB(model.poi, data.poi, quantiles=c(0.05,0.95), paral=TRUE, paral.predict=TRUE)
stop.predictOOB<-Sys.time()
stop.predictOOB-start.predictOOB
predoob.Poi
stop.predictOOB-start.predictOOB
predoob.Poi$expectation
predoob.Poi
model.poi
start.predictOOB<- Sys.time()
predoob.Poi <- predictOOB(model.poi, data.poi, quantiles=c(0.05,0.95), paral=FALSE, paral.predict=TRUE)
stop.predictOOB<-Sys.time()
stop.predictOOB-start.predictOOB
predoob.Poi
start.predictOOB<- Sys.time()
predoob.Poi <- predictOOB(model.poi, data.poi, quantiles=c(0.05,0.95), paral=TRUE)
stop.predictOOB<-Sys.time()
stop.predictOOB-start.predictOOB
library(abcrf)
setwd("E:/These 2016-2017/Articles/Article 4 - Desert Locust inference with ABC-RF/Code pour JdS/informed")
data.name<-"reftable1.bin"
data.root<-sub("\\..*$", "", data.name)
data <- readRefTable(filename = data.name, header="header.txt")
index1 <- data$scenarios == 1
poi1<-data$params[index1, "tca"]#to modify
poi2<-data$params[index1, "tdiv"]#to modify
poi<-poi1/poi2#to modify
data.poi <- data.frame(poi, data$stats[index1, ])
nref <- 100000
data.poi <- data.poi[1:nref,]
ntree<- 500
set.seed(1)
######### Forest construction and Prediction on a single statobs dataset
model.poi <- regAbcrf(formula = poi~., data = data.poi, ntree=ntree, paral = TRUE)
model.poi
start.predict<- Sys.time()
pred.obsPoi <- predict(object = model.poi, obs = obs.poi, training = data.poi,
quantiles = c(0.05,0.95), paral = TRUE, paral.predict=TRUE, post.err.med = TRUE)
library(abcrf)
setwd("E:/These 2016-2017/Articles/Article 4 - Desert Locust inference with ABC-RF/Code pour JdS/informed")
data.name<-"reftable1.bin"
data.root<-sub("\\..*$", "", data.name)
data <- readRefTable(filename = data.name, header="header.txt")
index1 <- data$scenarios == 1
poi1<-data$params[index1, "tca"]#to modify
poi2<-data$params[index1, "tdiv"]#to modify
poi<-poi1/poi2#to modify
data.poi <- data.frame(poi, data$stats[index1, ])
nref <- 10000
data.poi <- data.poi[1:nref,]
ntree<- 500
set.seed(1)
######### Forest construction and Prediction on a single statobs dataset
model.poi <- regAbcrf(formula = poi~., data = data.poi, ntree=ntree, paral = TRUE)
obs.poi <- read.table("statobs.txt", header=TRUE)
start.predict<- Sys.time()
pred.obsPoi <- predict(object = model.poi, obs = obs.poi, training = data.poi,
quantiles = c(0.05,0.95), paral = TRUE, paral.predict=TRUE, post.err.med = TRUE)
stop.predict<-Sys.time()
stop.predict-start.predict
pred.obsPoi
pred.obsPoi$expectation
pred.obsPoi$post.NMAE.mean
pred.obsPoi$prior.NMAE.mean
df<-c(pred.obsPoi$expectation, pred.obsPoi$med, pred.obsPoi$quantiles[1], pred.obsPoi$quantiles[2],
pred.obsPoi$post.NMAE.med, pred.obsPoi$post.NMAE.mean, pred.obsPoi$prior.coverage,
pred.obsPoi$prior.NMAE.med, pred.obsPoi$prior.NMAE, model.poi$model.rf$NMAE)
df
pred.obsPoi$prior.coverage
model.poi$model.rf$NMAE
pred.obsPoi$prior.NMAE
df<-c(pred.obsPoi$expectation, pred.obsPoi$med, pred.obsPoi$quantiles[1], pred.obsPoi$quantiles[2],
pred.obsPoi$post.NMAE.med, pred.obsPoi$post.NMAE.mean, pred.obsPoi$prior.coverage,
pred.obsPoi$prior.NMAE.med, pred.obsPoi$prior.NMAE.mean, model.poi$model.rf$NMAE)
df
pred.obsPoi$MSE.prior
pred.obsPoi$prior.MSE.mean
pred.obsPoi <- predict(object = model.poi, obs = obs.poi, training = data.poi,
quantiles = c(0.05,0.95), paral = TRUE, paral.predict=TRUE)
pred.obsPoi
pred.obsPoi$post.NMAE.mean
start.predict<- Sys.time()
pred.obsPoi <- predict(object = model.poi, obs = obs.poi, training = data.poi,
quantiles = c(0.05,0.95), paral = TRUE, paral.predict=TRUE, post.err.med = TRUE)
stop.predict<-Sys.time()
stop.predict-start.predict
pred.obsPoi
# start.predictOOB<- Sys.time()
# predoob.Poi <- predictOOB(model.poi, data.poi, quantiles=c(0.05,0.95), paral=TRUE)
# stop.predictOOB<-Sys.time()
# stop.predictOOB-start.predictOOB
df<-c(pred.obsPoi$expectation, pred.obsPoi$med, pred.obsPoi$quantiles[1], pred.obsPoi$quantiles[2],
pred.obsPoi$post.NMAE.med, pred.obsPoi$post.NMAE.mean, pred.obsPoi$prior.coverage,
pred.obsPoi$prior.NMAE.med, pred.obsPoi$prior.NMAE.mean, model.poi$model.rf$NMAE)
df
var.names<-c("mean","median","q5","q95","post.NMAE.median","post.NMAE.mean",
"prior.NMAE.cov","prior.NMAE.median","prior.NMAE.mean", "prior.NMAE.mean.RF")
var.names
write.table(t(df),file="tdiv.good.obs.table.csv",col.names = var.names, row.names = data.root)
sum(model.poi$model.rf$predictions == predoob.Poi$expectation)
gc()
library(abcrf)
setwd("E:/These 2016-2017/Articles/Article 4 - Desert Locust inference with ABC-RF/Code pour JdS/informed")
# setwd("/nfs/work/defimag/raynal/Criquet/informed")
data.name<-"reftable1.bin"
data.root<-sub("\\..*$", "", data.name)
data <- readRefTable(filename = data.name, header="header.txt")
index1 <- data$scenarios == 1
poi1<-data$params[index1, "tca"]#to modify
poi2<-data$params[index1, "tdiv"]#to modify
poi<-poi1/poi2#to modify
data.poi <- data.frame(poi, data$stats[index1, ])
nref <- 10000
data.poi <- data.poi[1:nref,]
ntree<- 500
set.seed(1)
######### Forest construction and Prediction on a single statobs dataset
model.poi <- regAbcrf(formula = poi~., data = data.poi, ntree=ntree, paral = TRUE)
obs.poi <- read.table("statobs.txt", header=TRUE)
start.predict<- Sys.time()
pred.obsPoi <- predict(object = model.poi, obs = obs.poi, training = data.poi,
quantiles = c(0.05,0.95), paral = TRUE, paral.predict=TRUE, post.err.med = TRUE)
stop.predict<-Sys.time()
stop.predict-start.predict
# start.predictOOB<- Sys.time()
# predoob.Poi <- predictOOB(model.poi, data.poi, quantiles=c(0.05,0.95), paral=TRUE)
# stop.predictOOB<-Sys.time()
# stop.predictOOB-start.predictOOB
df<-c(pred.obsPoi$expectation, pred.obsPoi$med, pred.obsPoi$quantiles[1], pred.obsPoi$quantiles[2],
pred.obsPoi$post.NMAE.med, pred.obsPoi$post.NMAE.mean, pred.obsPoi$prior.coverage,
pred.obsPoi$prior.NMAE.med, pred.obsPoi$prior.NMAE.mean, model.poi$model.rf$NMAE)
var.names<-c("mean","median","q5","q95","post.NMAE.median","post.NMAE.mean",
"prior.NMAE.cov","prior.NMAE.median","prior.NMAE.mean", "prior.NMAE.mean.RF")
write.table(t(df),file="tdiv.good.obs.table.csv",col.names = var.names, row.names = data.root)
library(abcrf)
library(abcrf)
??detectCores
library(abcrf)
library(abcrf)
library(abcrf)
??foreach
help(foreach)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
help(foreach)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
help(Rcpp.skeleton)
library(abcrf)
help(predictOOB)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
res <- predictOOB(model.rf.r, data2)
res
setwd("E:/These 2016-2017/Recherche")
Rcpp.package.skeleton(name = "testPackage")
library(Rcpp)
Rcpp.package.skeleton(name = "testPackage")
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
help("predictOOB")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
res <- predictOOB(model.rf.r, data2)
info.store
findweights_train
library(abcrf)
library(abcrf)
library(abcrf)
library(abcrf)
help("predictOOB")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
res <- predictOOB(model.rf.r, data2)
library(abcrf)
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
res <- predictOOB(model.rf.r, data2)
res
help("predict.regAbcrf")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE)
install.packages(c("assertthat", "backports", "BH", "boot", "brms", "callr", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "devtools", "dplyr", "DT", "evaluate", "expm", "fGarch", "forcats", "formatR", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lazyeval", "lintr", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotrix", "pls", "pROC", "processx", "ps", "purrr", "quantreg", "R.utils", "R6", "ranger", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "registry", "remotes", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rpart", "rpart.plot", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "sessioninfo", "shiny", "shinythemes", "StanHeaders", "stringi", "stringr", "styler", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "xfun", "xtable", "xts", "zip", "zoo"))
install.packages(c("assertthat", "backports", "BH", "boot", "brms", "callr", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "devtools", "dplyr", "DT", "evaluate", "expm", "fGarch", "forcats", "formatR", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lazyeval", "lintr", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotrix", "pls", "pROC", "processx", "ps", "purrr", "quantreg", "R.utils", "R6", "ranger", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "registry", "remotes", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rpart", "rpart.plot", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "sessioninfo", "shiny", "shinythemes", "StanHeaders", "stringi", "stringr", "styler", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "xfun", "xtable", "xts", "zip", "zoo"))
install.packages(c("assertthat", "backports", "BH", "boot", "brms", "callr", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "devtools", "dplyr", "DT", "evaluate", "expm", "fGarch", "forcats", "formatR", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lazyeval", "lintr", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotrix", "pls", "pROC", "processx", "ps", "purrr", "quantreg", "R.utils", "R6", "ranger", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "registry", "remotes", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rpart", "rpart.plot", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "sessioninfo", "shiny", "shinythemes", "StanHeaders", "stringi", "stringr", "styler", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "xfun", "xtable", "xts", "zip", "zoo"))
install.packages(c("assertthat", "backports", "BH", "boot", "brms", "callr", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "devtools", "dplyr", "DT", "evaluate", "expm", "fGarch", "forcats", "formatR", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lazyeval", "lintr", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotrix", "pls", "pROC", "processx", "ps", "purrr", "quantreg", "R.utils", "R6", "ranger", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "registry", "remotes", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rpart", "rpart.plot", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "sessioninfo", "shiny", "shinythemes", "StanHeaders", "stringi", "stringr", "styler", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "xfun", "xtable", "xts", "zip", "zoo"))
install.packages(c("assertthat", "backports", "BH", "boot", "brms", "callr", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "devtools", "dplyr", "DT", "evaluate", "expm", "fGarch", "forcats", "formatR", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lazyeval", "lintr", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotrix", "pls", "pROC", "processx", "ps", "purrr", "quantreg", "R.utils", "R6", "ranger", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "registry", "remotes", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rpart", "rpart.plot", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "sessioninfo", "shiny", "shinythemes", "StanHeaders", "stringi", "stringr", "styler", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "xfun", "xtable", "xts", "zip", "zoo"))
install.packages(c("assertthat", "backports", "BH", "boot", "brms", "callr", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "devtools", "dplyr", "DT", "evaluate", "expm", "fGarch", "forcats", "formatR", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lazyeval", "lintr", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotrix", "pls", "pROC", "processx", "ps", "purrr", "quantreg", "R.utils", "R6", "ranger", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "registry", "remotes", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rpart", "rpart.plot", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "sessioninfo", "shiny", "shinythemes", "StanHeaders", "stringi", "stringr", "styler", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "xfun", "xtable", "xts", "zip", "zoo"))
install.packages(c("assertthat", "backports", "BH", "boot", "brms", "callr", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "devtools", "dplyr", "DT", "evaluate", "expm", "fGarch", "forcats", "formatR", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lazyeval", "lintr", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotrix", "pls", "pROC", "processx", "ps", "purrr", "quantreg", "R.utils", "R6", "ranger", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "registry", "remotes", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rpart", "rpart.plot", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "sessioninfo", "shiny", "shinythemes", "StanHeaders", "stringi", "stringr", "styler", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "xfun", "xtable", "xts", "zip", "zoo"))
remove.packages("abcrf")
install.packages("abcrf")
install.packages("Matrix")
library(abcrf)
help("predict.regAbcrf")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med=TRUE)
library(abcrf)
library(abcrf)
library(abcrf)
help("predict.regAbcrf")
devtools::check(document = FALSE)
library(abcrf)
help("predictOOB")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
res <- predictOOB(model.rf.r, data2, paral = TRUE, ncores = 3)
res
res$NMAE.med
res$coverage
library(abcrf)
help("predict.regAbcrf")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE, paral = TRUE)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE, paral = TRUE)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE)
library(abcrf)
toto1 <- Sys.time()
toto2 <- Sys.time()
toto2-toto1
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2)
help("predict.regAbcrf")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100, paral = TRUE, ncores = 7)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE, paral = TRUE, ncores = 7)
model.rf.r
library(abcrf)
library(abcrf)
install.packages("F:/These 2016-2017/Recherche/abcrf packages/abcrf_1.8_v3_retournPriorErDansPredictregAbcrf/abcrf_1.8.tar.gz", repos = NULL, type = "source")
library(abcrf)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, paral = TRUE, ncores=7, post.err.med = TRUE)
model.rf.r
library(abcrf)
library(abcrf)
help("predictOOB")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
res <- predictOOB(model.rf.r, data2)
res <- predictOOB(model.rf.r, data2, paral = TRUE)
res
res2 <- predictOOB(model.rf.r, data2)
res
res2
plot(res$expectation, res2$expectation)
res$variance
res$variance[1:10]
res2$variance[1:10]
help("predict.regAbcrf")
help("predict.regAbcrf")
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE, paral = TRUE)
data(snp)
modindex <- snp$modindex
sumsta <- snp$sumsta[modindex == "3",]
r <- snp$param$r[modindex == "3"]
r <- r[1:500]
sumsta <- sumsta[1:500,]
data2 <- data.frame(r, sumsta)
model.rf.r <- regAbcrf(r~., data2, ntree=100)
data(snp.obs)
predict(model.rf.r, snp.obs, data2)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE)
predict(model.rf.r, snp.obs, data2, post.err.med = TRUE, paral = TRUE)
library(abcrf)
help(abcrf)
library(abcrf)
q()
q()
