#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
NumericMatrix findweights_train(NumericMatrix trainingNodeID, IntegerMatrix inbag, int ntrain, int trainIdx, int ntree){
  NumericMatrix result(ntrain, 1);     //to store the result, a column vector with the oob weights for 1 training data
  LogicalVector oobPerTree(ntrain);       //to store the number of out-of-bag per tree k
  //LogicalVector nonOobPerTree(ntrain);
  LogicalVector isEqual(ntrain);          //to identifie the positions 
  NumericVector nbOob(ntrain);
  NumericVector Boob(1);             //the denominator for the weight computation
  NumericVector colK(ntrain);             
  double LbOob=NA_REAL;
  for(int k=0; k<ntree; k++){
    //oobPerTree = (inbag(_,k) == 0);       //identify what training data is out-of-bag in tree k
    colK = inbag(_,k);                    // store the inbag identifier
    //nonOobPerTree = (inbag(_,k) != 0);
    for(int i=0; i<1; i++){               // for each training data (only one the test=training!)
      if( inbag(i,k)==0 ){                // if the i-th training data is out-of-bag for tree k
        isEqual = trainingNodeID(_,k) == trainingNodeID(i,k);   //identify what training data falls in the same leaf than the i-th training
        nbOob = colK * as<NumericVector>(isEqual);              //recover a vector with the number of times an in-bag data fell with the i-th training
        if(is_true(any(nbOob!=0))){                             //s'il y a au moins une training inbag qui tombe avec the i-th training
          LbOob = sum(nbOob);                                   //je compte le nombre qui sont tombées avec (L_b.oob)
          nbOob = nbOob/LbOob;                                  //je calcul le ratio n_b.oob/L_b.oob
          result(_,i) = result(_,i) + nbOob;                    //je rajoute au vecteur des poids par arbre le ratio qu'on vient de calculer
          Boob[i]++;                                            //j'augmente le nombre d'arbre ou i-th training est out-of-bag convenant
        }
      }
      }
      }
  
  for(int i=0; i<1; i++){            //Pour chaque training (considéré comme test, je divise la somme des poids par B)
    result(_,i) = result(_,i)/Boob[i];
  }
  return(result);
  
      }

